diff --git a/Tensile/ClientWriter.py b/Tensile/ClientWriter.py
index 4e1b6686..81507651 100644
--- a/Tensile/ClientWriter.py
+++ b/Tensile/ClientWriter.py
@@ -76,6 +76,8 @@ def main( config ):
   pushWorkingPath("source")
   copyStaticFiles()
 
+  print(" bbk clientWriter ")
+
   ##############################################################################
   # Read Logic Files
   ##############################################################################
diff --git a/Tensile/Source/client/include/DataInitializationTyped.hpp b/Tensile/Source/client/include/DataInitializationTyped.hpp
index f47150ab..d51102c5 100644
--- a/Tensile/Source/client/include/DataInitializationTyped.hpp
+++ b/Tensile/Source/client/include/DataInitializationTyped.hpp
@@ -308,6 +308,7 @@ namespace Tensile
                         m_gpuInputsPristine = createNewGPUInputs(problem);
 
                     pristine = m_gpuInputsPristine;
+                    printf(" bbk pristine 1 \n");
 
                     if(m_curBoundsCheck == BoundsCheckMode::NaN)
                     {
@@ -323,6 +324,7 @@ namespace Tensile
                         m_cpuInputsPristine = createNewCPUInputs(problem);
 
                     pristine = m_cpuInputsPristine;
+                    printf(" bbk pristine 2 \n");
 
                     if(m_curBoundsCheck == BoundsCheckMode::NaN)
                     {
@@ -341,6 +343,7 @@ namespace Tensile
                 }
                 else
                 {
+                    printf(" bbk are we here? calling NewGPUInputs %d \n", !pristine);
                     if(!m_gpuInputs)
                         m_gpuInputs = allocNewGPUInputs(pristine);
 
@@ -365,6 +368,8 @@ namespace Tensile
 
             std::shared_ptr<ManagedInputs> createNewGPUInputs(ContractionProblem const& problem)
             {
+                printf(" bbk calling NEWGPUINPUT 1 \n");
+                
                 auto rv = allocNewGPUInputs();
                 if(!m_cpuInputsPristine)
                     m_cpuInputsPristine = createNewCPUInputs(problem);
@@ -486,8 +491,14 @@ namespace Tensile
             std::shared_ptr<ManagedInputs> allocNewGPUInputs(std::shared_ptr<ManagedInputs> pristine
                                                              = nullptr)
             {
-                if(m_curBoundsCheck != BoundsCheckMode::Disable || (pristine && !pristine->gpu))
+                printf(" bbk inside the allocNewGPUInputs-  %d -gpu %d\n", !pristine, pristine->gpu);
+                printf(" bbk conditions  %d -  %d\n", m_curBoundsCheck != BoundsCheckMode::Disable , (pristine && !pristine->gpu));
+                
+                if(m_curBoundsCheck != BoundsCheckMode::Disable || (pristine && !pristine->gpu)){
                     pristine = nullptr;
+                printf(" bbk inside the allocNewGPUInputs-  %d \n", !pristine);
+                }
+
 
                 std::shared_ptr<AType> a;
                 std::shared_ptr<BType> b;
@@ -586,10 +597,12 @@ namespace Tensile
 
                 if(pristine)
                 {
+                    printf(" bbk required workspace allocation \n");
                     ws = pristine->managedWS;
                 }
                 else
                 {
+                    printf(" bbk full workspace allocation \n");
                     ws = allocNewGPUBuffer<void>("ws", m_workspaceSize);
                 }
 
diff --git a/Tensile/Source/client/main.cpp b/Tensile/Source/client/main.cpp
index e4a8dba6..35d7aafd 100644
--- a/Tensile/Source/client/main.cpp
+++ b/Tensile/Source/client/main.cpp
@@ -471,6 +471,9 @@ int main(int argc, const char* argv[])
     using namespace Tensile;
     using namespace Tensile::Client;
 
+    printf(" bbk library logic \n");
+    printf(" bbk library logic \n");
+
     auto args = parse_args(argc, argv);
 
     ClientProblemFactory problemFactory(args);
diff --git a/Tensile/Source/client/source/DataInitialization.cpp b/Tensile/Source/client/source/DataInitialization.cpp
index b252932f..57f77a2c 100644
--- a/Tensile/Source/client/source/DataInitialization.cpp
+++ b/Tensile/Source/client/source/DataInitialization.cpp
@@ -408,8 +408,10 @@ namespace Tensile
                 m_cMaxElements = RoundUpToMultiple<unsigned int>(m_cMaxElements, cRoundUpSize);
                 m_dMaxElements = RoundUpToMultiple<unsigned int>(m_dMaxElements, dRoundUpSize);
             }
+            
             m_problemDependentData = IsProblemDependent(m_aInit) || IsProblemDependent(m_bInit)
                                      || IsProblemDependent(m_cInit) || IsProblemDependent(m_dInit);
+            printf(" bbk m_aInit %d - %d \n", m_aInit, m_problemDependentData);
         }
 
         DataInitialization::~DataInitialization() {}
diff --git a/Tensile/Source/lib/include/Tensile/MasterSolutionLibrary.hpp b/Tensile/Source/lib/include/Tensile/MasterSolutionLibrary.hpp
index 771c94c4..d75527fe 100644
--- a/Tensile/Source/lib/include/Tensile/MasterSolutionLibrary.hpp
+++ b/Tensile/Source/lib/include/Tensile/MasterSolutionLibrary.hpp
@@ -79,6 +79,7 @@ namespace Tensile
 
         MasterSolutionLibrary() = default;
 
+        // bbk findBestSolution
         virtual std::shared_ptr<MySolution> findBestSolution(MyProblem const& problem,
                                                              Hardware const&  hardware,
                                                              double*          fitness
